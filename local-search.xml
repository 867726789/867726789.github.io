<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>手写RPC框架(一)</title>
    <link href="/2025/04/29/%E6%89%8B%E5%86%99RPC%E6%A1%86%E6%9E%B6(%E4%B8%80)/"/>
    <url>/2025/04/29/%E6%89%8B%E5%86%99RPC%E6%A1%86%E6%9E%B6(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<h1 id="手写RPC框架-一"><a href="#手写RPC框架-一" class="headerlink" title="手写RPC框架(一)"></a>手写RPC框架(一)</h1><p>本文参考<a href="https://github.com/Snailclimb/guide-rpc-framework%E5%AE%9E%E7%8E%B0rpc%E6%A1%86%E6%9E%B6%E3%80%82">https://github.com/Snailclimb/guide-rpc-framework实现rpc框架。</a></p><h2 id="RPC框架的结构"><a href="#RPC框架的结构" class="headerlink" title="RPC框架的结构"></a>RPC框架的结构</h2><p><img src="/2025/04/29/%E6%89%8B%E5%86%99RPC%E6%A1%86%E6%9E%B6(%E4%B8%80)/image-20250429200717908.png" alt="image-20250429200717908"></p><p><strong>中心：</strong>保存服务相关的注册信息，接受客户端的订阅</p><p><strong>客户端：</strong>从中心拉取服务列表到本地，本地通过负载均衡调用对应的服务</p><p><strong>服务端：</strong>启动时向中心注册服务信息</p><h2 id="基于Socket的RPC框架"><a href="#基于Socket的RPC框架" class="headerlink" title="基于Socket的RPC框架"></a>基于Socket的RPC框架</h2><h3 id="请求与响应格式"><a href="#请求与响应格式" class="headerlink" title="请求与响应格式"></a>请求与响应格式</h3><p>使用RPC进行通信的目的在于远程调用函数，那么请求应当包含唯一确定一个函数的所有条件。</p><p>接口+方法+参数列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RpcRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 请求唯一标识（UUID格式）.</span><br><span class="hljs-comment">     * 用于匹配请求和响应，避免多请求混淆.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String requestId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 目标接口的全限定名.</span><br><span class="hljs-comment">     * 示例: org.oyq.service.UserService</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String interfaceName;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 调用的方法名.</span><br><span class="hljs-comment">     * 示例: getUserById</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String methodName;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方法参数值数组.</span><br><span class="hljs-comment">     * 需与 &#123;<span class="hljs-doctag">@link</span> #paramTypes&#125; 顺序一一对应.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Object[] parameters;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方法参数类型数组.</span><br><span class="hljs-comment">     * 用于服务端反序列化时确定参数类型.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Class&lt;?&gt;[] paramTypes;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 服务版本号（语义化版本格式）.</span><br><span class="hljs-comment">     * 示例: 1.0.0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String version;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 服务分组标识.</span><br><span class="hljs-comment">     * 用于区分同一接口的不同实现组.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String group;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取完整的RPC服务名称.</span><br><span class="hljs-comment">     * 格式: interfaceName + group + version</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 服务唯一标识，示例: org.oyq.service.UserServiceGroupA1.0.0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRpcServiceName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getInterfaceName() + <span class="hljs-built_in">this</span>.getGroup() + <span class="hljs-built_in">this</span>.getVersion();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>响应消息则需要包含状态和数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RpcResponse</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-meta">@Serial</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">7216777645739233009L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 请求唯一标识（UUID格式），需与请求端的 &#123;<span class="hljs-doctag">@code</span> requestId&#125; 一致.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String requestId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 响应状态码.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> RpcResponseCodeEnum</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer code;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 响应消息（通常用于错误描述）.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 响应业务数据（泛型）.</span><br><span class="hljs-comment">     * 成功时返回业务对象，失败时为 null.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> T data;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="SocketRpcServer"><a href="#SocketRpcServer" class="headerlink" title="SocketRpcServer"></a>SocketRpcServer</h3><p>对于一个Socket服务器，需要具有接收Socket连接的能力，因此通过循环来持续监听端口实现对于连接监控</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (<span class="hljs-type">ServerSocket</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>()) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> InetAddress.getLocalHost().getHostAddress();<br>    server.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(host, PORT)); <span class="hljs-comment">//监听端口</span><br>    Socket socket;<br>    <span class="hljs-keyword">while</span> ((socket = server.accept()) != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//接受套接字</span><br>        log.info(<span class="hljs-string">&quot;client connected [&#123;&#125;]&quot;</span>, socket.getInetAddress());<br>        threadPool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SocketRpcRequestHandlerRunnable</span>(socket)); <span class="hljs-comment">//基于线程池执行对应的请求</span><br>    &#125;<br>    threadPool.shutdown();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    log.error(<span class="hljs-string">&quot;occur IOException:&quot;</span>, e);<br>&#125;<br></code></pre></td></tr></table></figure><p>每个请求会在accept之后被server创建的线程池处理，为了实现该能力，创建了对应的实现runnable的类SocketRpcRequestHandlerRunnable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>  Thread.currentThread().getName());<br>  <br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>         <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream())) &#123;<br>        <span class="hljs-type">RpcRequest</span> <span class="hljs-variable">rpcRequest</span> <span class="hljs-operator">=</span> (RpcRequest) objectInputStream.readObject();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> rpcRequestHandler.handle(rpcRequest); <span class="hljs-comment">// 实际进行请求处理</span><br>        objectOutputStream.writeObject(RpcResponse.success(result, rpcRequest.getRequestId()));<br>        objectOutputStream.flush();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException | ClassNotFoundException e) &#123;<br>        log.error(<span class="hljs-string">&quot;occur exception:&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在rpcRequestHandler中通过反射，依据对应的接口名+方法名+参数类型列表获取对应的函数，invoke带参方法得到最终结果返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Object <span class="hljs-title function_">invokeTargetMethod</span><span class="hljs-params">(RpcRequest rpcRequest, Object service)</span> &#123;<br>    Object result;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> rpcRequest.getParamTypes();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> service.getClass().getMethod(rpcRequest.getMethodName(), rpcRequest.getParamTypes()); <span class="hljs-comment">//获取函数</span><br>        result = method.invoke(service, rpcRequest.getParameters()); <span class="hljs-comment">// 反射调用</span><br>        log.info(<span class="hljs-string">&quot;service:[&#123;&#125;] successful invoke method:[&#123;&#125;]&quot;</span>, rpcRequest.getInterfaceName(), rpcRequest.getMethodName());<br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException | IllegalArgumentException | InvocationTargetException | IllegalAccessException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RpcException</span>(e.getMessage(), e);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务器的另一个重要功能是服务的注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerService</span><span class="hljs-params">(RpcServiceConfig rpcServiceConfig)</span> &#123;<br>    <span class="hljs-comment">// serviceProvider服务注册</span><br>    serviceProvider.publishService(rpcServiceConfig);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">publishService</span><span class="hljs-params">(RpcServiceConfig rpcServiceConfig)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> InetAddress.getLocalHost().getHostAddress();<br>        <span class="hljs-built_in">this</span>.addService(rpcServiceConfig); <span class="hljs-comment">//本地注册</span><br>        serviceRegistry.registerService(rpcServiceConfig.getRpcServiceName(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(host, RpcServer.PORT)); <span class="hljs-comment">//在注册中心注册</span><br>    &#125; <span class="hljs-keyword">catch</span> (UnknownHostException e) &#123;<br>        log.error(<span class="hljs-string">&quot;occur exception when getHostAddress&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="SocketRpcClient"><a href="#SocketRpcClient" class="headerlink" title="SocketRpcClient"></a>SocketRpcClient</h3><p>客户端需要做的仅仅是发送请求即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">sendRpcRequest</span><span class="hljs-params">(RpcRequest rpcRequest)</span> &#123;<br>    <br>    <span class="hljs-comment">// serviceDiscovery服务发现进行负载均衡获取对应的服务的地址，进行调用，基于发现中心</span><br>    <span class="hljs-type">InetSocketAddress</span> <span class="hljs-variable">inetSocketAddress</span> <span class="hljs-operator">=</span> serviceDiscovery.lookupService(rpcRequest);<br><br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>()) &#123;<br>        <span class="hljs-comment">// 1. 建立Socket连接</span><br>        socket.connect(inetSocketAddress);<br><br>        <span class="hljs-comment">// 2. 序列化请求对象</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>        outputStream.writeObject(rpcRequest);<br><br>        <span class="hljs-comment">// 3. 获取并反序列化响应</span><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>        <span class="hljs-keyword">return</span> inputStream.readObject();<br><br>    &#125; <span class="hljs-keyword">catch</span> (IOException | ClassNotFoundException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RpcException</span>(<span class="hljs-string">&quot;RPC服务调用失败: &quot;</span> + e.getMessage(), e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这已经实现了最基本的Socket和服务调用能力，但一般而言Rpc框架会将网络相关的操作透明化，对于用户而言远程调用和调用本地的方法一样，我们使用ByteBuddy的代理实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getProxy</span><span class="hljs-params">(Class&lt;T&gt; clazz)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> (T) <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteBuddy</span>()<br>                .subclass(clazz)<br>                .method(ElementMatchers.any())<br>                .intercept(InvocationHandlerAdapter.of(<span class="hljs-built_in">this</span>))<br>                .make()<br>                .load(clazz.getClassLoader())<br>                .getLoaded()<br>                .getDeclaredConstructor()<br>                .newInstance();<br>    &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException | InstantiationException | IllegalAccessException | NoSuchMethodException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//网络操作包装</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> &#123;<br>    <span class="hljs-type">RpcRequest</span> <span class="hljs-variable">rpcRequest</span> <span class="hljs-operator">=</span> RpcRequest.builder().methodName(method.getName())<br>            .parameters(args)<br>            .interfaceName(method.getDeclaringClass().getName())<br>            .paramTypes(method.getParameterTypes())<br>            .requestId(UUID.randomUUID().toString())<br>            .group(rpcServiceConfig.getGroup())<br>            .version(rpcServiceConfig.getVersion())<br>            .build();<br><br>    RpcResponse&lt;Object&gt; rpcResponse = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (rpcRequestTransport <span class="hljs-keyword">instanceof</span> SocketRpcClient) &#123;<br>        rpcResponse = (RpcResponse&lt;Object&gt;)  rpcRequestTransport.sendRpcRequest(rpcRequest);<br>    &#125;<br>    <span class="hljs-built_in">this</span>.check(rpcResponse, rpcRequest);<br>    <span class="hljs-keyword">return</span> rpcResponse.getData();<br>&#125;<br></code></pre></td></tr></table></figure><p>现在可以创建简单的demo进行测试了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SocketClientMain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">RpcRequestTransport</span> <span class="hljs-variable">rpcRequestTransport</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SocketRpcClient</span>();<br>        <span class="hljs-type">RpcServiceConfig</span> <span class="hljs-variable">rpcServiceConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RpcServiceConfig</span>();<br>        <span class="hljs-type">RpcClientProxy</span> <span class="hljs-variable">rpcClientProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RpcClientProxy</span>(rpcRequestTransport, rpcServiceConfig);<br>        <span class="hljs-type">HelloService</span> <span class="hljs-variable">helloService</span> <span class="hljs-operator">=</span> rpcClientProxy.getProxy(HelloService.class);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> helloService.hello(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>(<span class="hljs-string">&quot;111&quot;</span>, <span class="hljs-string">&quot;222&quot;</span>));<br>        System.out.println(hello);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//服务端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SocketServerMain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">HelloService</span> <span class="hljs-variable">helloService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloServiceImpl</span>();<br>        <span class="hljs-type">SocketRpcServer</span> <span class="hljs-variable">socketRpcServer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SocketRpcServer</span>();<br>        <span class="hljs-type">RpcServiceConfig</span> <span class="hljs-variable">rpcServiceConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RpcServiceConfig</span>();<br>        rpcServiceConfig.setService(helloService);<br>        socketRpcServer.registerService(rpcServiceConfig);<br>        socketRpcServer.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务端：</p><p><img src="/2025/04/29/%E6%89%8B%E5%86%99RPC%E6%A1%86%E6%9E%B6(%E4%B8%80)/image-20250429233248712.png" alt="image-20250429233248712"></p><p>客户端</p><p><img src="/2025/04/29/%E6%89%8B%E5%86%99RPC%E6%A1%86%E6%9E%B6(%E4%B8%80)/image-20250429233314484.png" alt="image-20250429233314484"></p><p>实验证明基本实现基于Socket的RPC框架能力</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2025/04/28/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/04/28/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>你好</p><p><img src="/2025/04/28/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/2.png" alt="2"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/04/28/hello-world/"/>
    <url>/2025/04/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
